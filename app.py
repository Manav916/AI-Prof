import openai
import os
from dotenv import load_dotenv

load_dotenv()

# Load the API key from the environment variable
api_key=os.getenv("TOGETHER_API_KEY")

if api_key is None:
    raise EnvironmentError("The TOGETHER_API_KEY environment variable is not set.")

# Initialize the OpenAI API client
client = openai.OpenAI(
    api_key= api_key,
    base_url="https://api.together.xyz/v1",
    )

# System prompt
system_content = "You are a computer science professor. Be descriptive and helpful."

# List of topics and corresponding prompts
topics = [
    {
        "topic": "Load Balancing",
        "prompt": "Explain the concept of load balancing in cloud computing."
    },
    {
        "topic": "Penetration Testing",
        "prompt": "What is penetration testing in cyber security?"
    },
    {
        "topic": "Neural Networks",
        "prompt": "Describe the architecture and components of a neural network."
    },
        {
        "topic": "Support Vector Machines",
        "prompt": "Explain the principles behind Support Vector Machines (SVMs) in machine learning."
    },
    {
        "topic": "Random Forests",
        "prompt": "What are Random Forests, and how do they address overfitting in decision trees?"
    },
    # Add more topics and prompts as needed
]

# Function to ask a question and wait for user input
def ask_question(prompt):
    try:
        # Make an API call
        response = client.chat.completions.create(
            model="mistralai/Mixtral-8x7B-Instruct-v0.1",
            messages=[
                {"role": "system", "content": system_content},
                {"role": "user", "content": prompt},
            ],
            temperature=0.7,
            # max_tokens=256,
        )

        # Print the question generated by the AI tutor
        print(f"AI Tutor: {response.choices[0].message.content}\n")

        # Wait for user input
        input("Press Enter to continue...")

    except Exception as e:
        print(f"Error: {str(e)}")

# Function to answer user doubts or questions
def answer_doubts():
    while True:
        user_input = input("Enter doubt if any or type 'Quit' to exit: ")

        if user_input.lower() == 'quit':
            break

        # Ask the AI tutor for an answer
        ask_question(user_input)

# Loop through ML topics and teach them
for topic_info in topics:
    topic = topic_info["topic"]
    prompt = topic_info["prompt"]

    print(f"Topic: {topic}")
    print("AI Tutor: Let's learn about this topic.\n")

    # Ask a question related to the topic
    ask_question(prompt)

    # Ask if the user wants to ask doubts or learn another topic
    choice = input("Any Doubts or Continue with next topic (Doubts/Yes/No)?: ")

    if choice.lower() == "doubts":
        # Allow the user to ask doubts
        answer_doubts()
    elif choice.lower() != "yes":
        break

print("AI Tutor: That's all for today. Feel free to come back anytime to learn more or ask questions!")
